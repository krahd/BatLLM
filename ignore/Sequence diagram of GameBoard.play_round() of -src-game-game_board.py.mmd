
%%{init: {'theme':'forest'}}%%

sequenceDiagram

    Title Sequence diagram of GameBoard.play_round() of /src/game/game_board.py

    participant p1 as play_round()<br>:game/game_board.py/GameBoard
    participant p2 as <br>:util/utils.py/utils.py
    participant p3 as b<br>:game/bot.py/Bot
    participant p4 as history_manager<br>:game/history_manager.py/HistoryManager
    participant p5 as config<br>:configs/app_config.py/AppConfig


	p1 ->>+ p1: 1: add_text_to_llm_response_history( b.id, f"[color=#000000][b]Round<br>{self.current_round}[/b][/color]<br>n" )
	p1 ->>+ p2: 1.1: find_id_in_parents(self, f"output_history_player_{bot_id}")<br>
	p2 -->>- p1: 1.1: return value
	p1 ->>+ p2: 1.2: find_id_in_parents(self, f"scroll_output_history_player_{<br>bot_id}")
	p2 -->>- p1: 1.2: return value
	p1 ->>+ p2: 1.3: find_id_in_parents(self, f"output_history_player_{bot_id}")<br>
	p2 -->>- p1: 1.3: return value
	p1 -->>- p1: 1: return value
	p1 ->>+ p3: 2: log(f" n[b][size=30sp]Round {self.<br>.current_round} started[/size][<br>/b]")
	p3 -->>- p1: 2: return value
	p1 ->>+ p4: 3: start_round(self)
	p4 ->>+ p4: 3.1: start_game(game)
	p4 ->>+ p4: 3.1.1: end_game(game_board, force=True)
	p4 ->>+ p4: 3.1.1.1: _now_iso()
	p4 -->>- p4: 3.1.1.1: return value
	p4 ->>+ p4: 3.1.1.2: _get_bots_state(game)
	p4 -->>- p4: 3.1.1.2: return value
	p4 ->>+ p4: 3.1.1.3: _now_iso()
	p4 -->>- p4: 3.1.1.3: return value
	p4 ->>+ p4: 3.1.1.4: _now_iso()
	p4 -->>- p4: 3.1.1.4: return value
	p4 ->>+ p4: 3.1.1.5: _determine_winner(game)
	p4 ->>+ p4: 3.1.1.5.1: _get_bots_state(game)
	p4 -->>- p4: 3.1.1.5.1: return value
	p4 -->>- p4: 3.1.1.5: return value
	p4 -->>- p4: 3.1.1: return value
	p4 ->>+ p4: 3.1.2: _now_iso()
	p4 -->>- p4: 3.1.2: return value
	p4 ->>+ p4: 3.1.3: _get_bots_state(game_board)
	p4 -->>- p4: 3.1.3: return value
	p4 -->>- p4: 3.1: return value
	p4 ->>+ p4: 3.2: end_round(game)
	p4 ->>+ p4: 3.2.1: end_turn(game)
	p4 ->>+ p4: 3.2.1.1: _now_iso()
	p4 -->>- p4: 3.2.1.1: return value
	p4 ->>+ p4: 3.2.1.2: _get_bots_state(game)
	p4 -->>- p4: 3.2.1.2: return value
	p4 -->>- p4: 3.2.1: return value
	p4 ->>+ p4: 3.2.2: _now_iso()
	p4 -->>- p4: 3.2.2: return value
	p4 -->>- p4: 3.2: return value
	p4 ->>+ p4: 3.3: _now_iso()
	p4 -->>- p4: 3.3: return value
	p4 ->>+ p4: 3.4: _get_bots_state(game)
	p4 -->>- p4: 3.4: return value
	p4 -->>- p1: 3: return value
	p1 ->>+ p1: 4: play_turn(0)
	p1 ->>+ p5: 4.1: get( "game", "turns_per_round"        )
	p5 -->>- p1: 4.1: return value
	p1 ->>+ p4: 4.2: end_round(self)
	p4 ->>+ p4: 4.2.1: end_turn(game)
	p4 ->>+ p4: 4.2.1.1: _now_iso()
	p4 -->>- p4: 4.2.1.1: return value
	p4 ->>+ p4: 4.2.1.2: _get_bots_state(game)
	p4 -->>- p4: 4.2.1.2: return value
	p4 -->>- p4: 4.2.1: return value
	p4 ->>+ p4: 4.2.2: _now_iso()
	p4 -->>- p4: 4.2.2: return value
	p4 -->>- p1: 4.2: return value
	p1 ->>+ p1: 4.3: add_text_to_llm_response_history(b.id, " n\n")
	p1 ->>+ p2: 4.3.1: find_id_in_parents(self, f"output_history_player_{bot_id}")<br>
	p2 -->>- p1: 4.3.1: return value
	p1 ->>+ p2: 4.3.2: find_id_in_parents(self, f"scroll_output_history_player_{<br>bot_id}")
	p2 -->>- p1: 4.3.2: return value
	p1 ->>+ p2: 4.3.3: find_id_in_parents(self, f"output_history_player_{bot_id}")<br>
	p2 -->>- p1: 4.3.3: return value
	p1 -->>- p1: 4.3: return value
	p1 ->>+ p3: 4.4: log(f"Round {self.current_round} ended")
	p3 -->>- p1: 4.4: return value
	p1 ->>+ p1: 4.5: game_is_over()
	p1 ->>+ p5: 4.5.1: get("game", "total_rounds")
	p5 -->>- p1: 4.5.1: return value
	p1 -->>- p1: 4.5: return value
	p1 ->>+ p4: 4.6: end_game(self)
	p4 ->>+ p4: 4.6.1: _now_iso()
	p4 -->>- p4: 4.6.1: return value
	p4 ->>+ p4: 4.6.2: _get_bots_state(game)
	p4 -->>- p4: 4.6.2: return value
	p4 ->>+ p4: 4.6.3: _now_iso()
	p4 -->>- p4: 4.6.3: return value
	p4 ->>+ p4: 4.6.4: _now_iso()
	p4 -->>- p4: 4.6.4: return value
	p4 ->>+ p4: 4.6.5: _determine_winner(game)
	p4 ->>+ p4: 4.6.5.1: _get_bots_state(game)
	p4 -->>- p4: 4.6.5.1: return value
	p4 -->>- p4: 4.6.5: return value
	p4 -->>- p1: 4.6: return value
	p1 ->>+ p1: 4.7: end_game()
	p1 -->>- p1: 4.7: return value
	p1 ->>+ p1: 4.8: start_new_game()
	p1 ->>+ p1: 4.8.1: add_text_to_llm_response_history( b.id, "[b][color=#ffa0a0] n nNew<br>Game\n\n[/color][/b]"<br> )
	p1 ->>+ p2: 4.8.1.1: find_id_in_parents(self, f"output_history_player_{bot_id}")<br>
	p2 -->>- p1: 4.8.1.1: return value
	p1 ->>+ p2: 4.8.1.2: find_id_in_parents(self, f"scroll_output_history_player_{<br>bot_id}")
	p2 -->>- p1: 4.8.1.2: return value
	p1 ->>+ p2: 4.8.1.3: find_id_in_parents(self, f"output_history_player_{bot_id}")<br>
	p2 -->>- p1: 4.8.1.3: return value
	p1 -->>- p1: 4.8.1: return value
	p1 ->>+ p4: 4.8.2: start_game(self)
	p4 ->>+ p4: 4.8.2.1: end_game(game_board, force=True)
	p4 ->>+ p4: 4.8.2.1.1: _now_iso()
	p4 -->>- p4: 4.8.2.1.1: return value
	p4 ->>+ p4: 4.8.2.1.2: _get_bots_state(game)
	p4 -->>- p4: 4.8.2.1.2: return value
	p4 ->>+ p4: 4.8.2.1.3: _now_iso()
	p4 -->>- p4: 4.8.2.1.3: return value
	p4 ->>+ p4: 4.8.2.1.4: _now_iso()
	p4 -->>- p4: 4.8.2.1.4: return value
	p4 ->>+ p4: 4.8.2.1.5: _determine_winner(game)
	Note right of p4: Further calls ignored for reaching max depth
	p4 -->>- p4: 4.8.2.1.5: return value
	p4 -->>- p4: 4.8.2.1: return value
	p4 ->>+ p4: 4.8.2.2: _now_iso()
	p4 -->>- p4: 4.8.2.2: return value
	p4 ->>+ p4: 4.8.2.3: _get_bots_state(game_board)
	p4 -->>- p4: 4.8.2.3: return value
	p4 -->>- p1: 4.8.2: return value
	p1 -->>- p1: 4.8: return value
	p1 ->>+ p2: 4.9: show_fading_alert( f"Round {self.current_round} is<br>over", round_res,<br>,                    duration=0.6,<br>,                    fade_duration=0.<br>5,                )
	p2 -->>- p1: 4.9: return value
	p1 ->>+ p1: 4.10: update_title_label()
	p1 ->>+ p2: 4.10.1: find_id_in_parents(self, "game_title_label")
	p2 -->>- p1: 4.10.1: return value
	p1 -->>- p1: 4.10: return value
	p1 ->>+ p4: 4.11: start_turn(self)
	p4 ->>+ p4: 4.11.1: start_round(game)
	p4 ->>+ p4: 4.11.1.1: start_game(game)
	p4 ->>+ p4: 4.11.1.1.1: end_game(game_board, force=True)
	Note right of p4: Further calls ignored for reaching max depth
	p4 -->>- p4: 4.11.1.1.1: return value
	p4 ->>+ p4: 4.11.1.1.2: _now_iso()
	p4 -->>- p4: 4.11.1.1.2: return value
	p4 ->>+ p4: 4.11.1.1.3: _get_bots_state(game_board)
	p4 -->>- p4: 4.11.1.1.3: return value
	p4 -->>- p4: 4.11.1.1: return value
	p4 ->>+ p4: 4.11.1.2: end_round(game)
	p4 ->>+ p4: 4.11.1.2.1: end_turn(game)
	Note right of p4: Further calls ignored for reaching max depth
	p4 -->>- p4: 4.11.1.2.1: return value
	p4 ->>+ p4: 4.11.1.2.2: _now_iso()
	p4 -->>- p4: 4.11.1.2.2: return value
	p4 -->>- p4: 4.11.1.2: return value
	p4 ->>+ p4: 4.11.1.3: _now_iso()
	p4 -->>- p4: 4.11.1.3: return value
	p4 ->>+ p4: 4.11.1.4: _get_bots_state(game)
	p4 -->>- p4: 4.11.1.4: return value
	p4 -->>- p4: 4.11.1: return value
	p4 ->>+ p4: 4.11.2: _now_iso()
	p4 -->>- p4: 4.11.2: return value
	p4 ->>+ p4: 4.11.3: _get_bots_state(game)
	p4 -->>- p4: 4.11.3: return value
	p4 -->>- p1: 4.11: return value
	p1 ->>+ p3: 4.12: submit_prompt_to_llm()
	p3 ->>+ p5: 4.12.1: get("game", "prompt_augmentation")
	p5 -->>- p3: 4.12.1: return value
	p3 ->>+ p5: 4.12.2: get("llm", "augmentation_header_file")
	p5 -->>- p3: 4.12.2: return value
	p3 ->>+ p3: 4.12.3: get_current_prompt()
	p3 ->>+ p3: 4.12.3.1: get_current_prompt_from_history()
	p3 -->>- p3: 4.12.3.1: return value
	p3 -->>- p3: 4.12.3: return value
	p3 ->>+ p3: 4.12.4: get_current_prompt()
	p3 ->>+ p3: 4.12.4.1: get_current_prompt_from_history()
	p3 -->>- p3: 4.12.4.1: return value
	p3 -->>- p3: 4.12.4: return value
	p3 ->>+ p3: 4.12.5: log(f" n n\n[b]Prompt:[/b] {self.<br>get_current_prompt()}\n\n")
	p3 -->>- p3: 4.12.5: return value
	p3 -->>- p1: 4.12: return value
	p1 -->>- p1: 4: return value
	p1 ->>+ p4: 5: end_turn(self)
	p4 ->>+ p4: 5.1: _now_iso()
	p4 -->>- p4: 5.1: return value
	p4 ->>+ p4: 5.2: _get_bots_state(game)
	p4 -->>- p4: 5.2: return value
	p4 -->>- p1: 5: return value
        